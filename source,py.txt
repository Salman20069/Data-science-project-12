from google.colab import files
uploaded = files.upload()
import pandas as pd

# Load the dataset into a DataFrame
df = pd.read_csv('diabetes.csv')
df.head()

df.info()
df.describe()
df.shape
df.columns

df.isnull().sum()
df.duplicated().sum()

import seaborn as sns
import matplotlib.pyplot as plt

# Distribution of key numeric features
sns.histplot(df['Glucose'], kde=True)
plt.title("Glucose Distribution")
plt.show()

# Correlation heatmap
plt.figure(figsize=(10, 6))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm')
plt.title("Feature Correlation")
plt.show()
# In the diabetes dataset, the target is usually the 'Outcome'
X = df.drop('Outcome', axis=1)
y = df['Outcome']
from sklearn.preprocessing import StandardScaler

scaler = StandardScaler()
X_scaled = scaler.fit_transform(X)
from sklearn.model_selection import train_test_split

X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)
from sklearn.linear_model import LogisticRegression

model = LogisticRegression()
model.fit(X_train, y_train)
from sklearn.metrics import accuracy_score, classification_report

y_pred = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
print(classification_report(y_test, y_pred))
new_input = [[6, 148, 72, 35, 0, 33.6, 0.627, 50]]  # example values
scaled_input = scaler.transform(new_input)
model.predict(scaled_input)
prediction = model.predict(scaled_input)
print("Prediction:", "Diabetic" if prediction[0] == 1 else "Non-Diabetic")
import gradio as gr

interface = gr.Interface(
    fn=predict_diabetes,
    inputs=[
        gr.Number(label="Pregnancies"),
        gr.Number(label="Glucose"),
        gr.Number(label="BloodPressure"),
        gr.Number(label="SkinThickness"),
        gr.Number(label="Insulin"),
        gr.Number(label="BMI"),
        gr.Number(label="DiabetesPedigreeFunction"),
        gr.Number(label="Age")
    ],
    outputs="text",
    title="ðŸŽ“ Student Performance Predictor (Diabetes Version)",
    description="Enter values to predict if the person is diabetic or not."
)

interface.launch()
